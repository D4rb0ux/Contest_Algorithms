//Аналитикам группы машинного обучения в фирме Y для проверки одной важной гипотезы нужно выполнить N численных экспериментов. 
//Каждый эксперимент Ei представляет собой сложную вычислительную задачу над входными данными большого размера,
//в результате выполнения которой получается нужный аналитикам ответ.
//В распоряжении аналитиков есть файл-сервер, а также кластер MapReduce, 
//который может параллельно и независимо выполнять любое количество задач. 
//Все данные для экспериментов находятся на файл-сервере и лежат в разных файлах, по одному файлу на эксперимент. 
//Пропускная способность файл-сервера ограничена, и поэтому одновременно с него можно скачивать не больше одного файла.
//Полная загрузка файла с данными с файл-сервера на кластер для очередного эксперимента Ei занимает время Ui. 
//Расчёт эксперимента Ei начинается сразу же, как только его файл с данными оказывается полностью загружен, 
//длится время Ti и может работать параллельно с загрузкой данных и вычислениями для других экспериментов. 
//По окончании этого расчёта для эксперимента Ei готов ответ. Эксперименты можно запускать в любом порядке.
//За какое минимальное время аналитики группы машинного обучения смогут выполнить все N экспериментов?

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    size_t n;
    cin >> n;
    vector<pair<size_t, size_t>> process_download(n);
    for (size_t i = 0; i < n; i++)
        cin >> process_download[i].second >> process_download[i].first;
    sort(process_download.rbegin(), process_download.rend());
    size_t total_time = 0;
    size_t total_download = 0;
    for (size_t i = 0; i < n; i++) {
        total_download += process_download[i].second;
        total_time = max(total_time, total_download + process_download[i].first);
    }
    cout << total_time;
} //
